class Solution {
public:
    bool isSafe(int row,int col,vector<vector<char>>& board, char value){
        int n=board.size();
        for(int i=0;i<n;i++){   
            if(board[row][i]==value)  //check row
                return false;
            if(board[i][col]==value)  //check col
                return false;
            if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)]==value)  //check sub block
                return false;
        }
        return true;
    }
    bool solve(vector<vector<char>>& board){
        int n=board.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='.'){
                    for(char val='1';val<='9';val++){
                        if(isSafe(i,j,board,val)){
                            board[i][j]=val;  //insert
                            bool furthersolution=solve(board); //recursive call
                            if(furthersolution==true){
                                return true;
                            }
                            else{
                                board[i][j]='.'; //backtrack
                            }
                        }
                    }// if 1-9 can't be inserted return back to previous step
                    //by returning false
                return false;
                }
            }
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);    
    } 
};
